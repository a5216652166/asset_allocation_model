# -*- coding: utf-8 -*-
"""
Created on Mon Sep 18 14:11:05 2017

@author: taoch
"""

# 载入模块
import numpy as np
import pandas as pd
pd.set_option('expand_frame_repr',False)

import config
import utils

from datetime import timedelta

'''         基本数据准备      '''
# 读取各类数据
# 读取文件夹
filelist = utils.get_filelist()

# 读取所有收盘价然后合并（向前填充缺失值）
closeprice = utils.merge_closeprice(filelist)
closeprice.fillna(method='ffill',inplace=True)

# 从2008年黄金指数成立开始
start = pd.to_datetime('2008-01-10')
closeprice1 = closeprice[start:]

# 计算各类指数收益率
day_ret = closeprice.pct_change().dropna()
day_ret = day_ret[start:]


'''     回测关键时间点     '''
# 截取交易日期
# 选取收益率前一天
tradingday = closeprice[(start - timedelta(1)):].index
# 截取收益日期
# 从有收益率的第一天开始
retday = day_ret.index

# 选取调仓时间
reb_day = utils.rebalance_freq(tradingday,freq='A')            
            

'''    调仓日markowitz权重分配    '''
import markowitz as m
def calc_rebalance_weight(day_ret, reb_day):
    """
    计算调仓日权重
    输入参数
    -------
        day_ret: pd.DataFrame
            各类资产日收益率序列
        reb_day: datetimeindex
            调仓时间
    """
    weight = []
    for i in np.arange(1,len(reb_day)):
       # 每次markowitz权重计算根据前一个调仓日后一天到当前调仓日
       mko = m.Markowitz(day_ret[reb_day[i-1] : reb_day[i]])
       res = mko.mean_std_portfolio()
       weight.append(res[0].weight.values)
       print('mko on ' + str(reb_day) + ' has been calculated' )
       
    return weight
       
def calc_rebalance_weight_var(day_ret, reb_day):
    """
    计算调仓日权重
    输入参数
    -------
        day_ret: pd.DataFrame
            各类资产日收益率序列
        reb_day: datetimeindex
            调仓时间
    """
    weight = []
    for i in np.arange(1,len(reb_day)):
       # 每次markowitz权重计算根据前一个调仓日后一天到当前调仓日
       mko = m.Markowitz(day_ret[reb_day[i-1] : reb_day[i]])
       res = mko.mean_std_portfolio_var()
       weight.append(res[0].weight.values)
       print('mko on ' + str(reb_day) + ' has been calculated' )
       
    return weight


# mko不控制var
weight = calc_rebalance_weight(day_ret, reb_day)

# mko控制var
weight = calc_rebalance_weight_var(day_ret, reb_day)

# 匹配每一个调仓日权重    
weight1 = pd.DataFrame(weight, index = reb_day[1:], columns = closeprice.columns)    
        
# 展开权重到每一个交易日
weight2 = weight1.resample('B',fill_method = 'ffill')        
weight2 = weight2.ix[tradingday].fillna(0)
        

# 进行模拟交易
import trade_implement as trade
t = trade.Trade_Implementation(trade_date = tradingday,
                               rebalance_date = reb_day,
                               price = closeprice1,
                               weight = weight2,
                               initialCap = 1,
                               commission = 0)

td = t.auto_trade()
test = t.amount
val = t.pos_value
