# -*- coding: utf-8 -*-
"""
Created on Fri Sep  8 08:48:09 2017

@author: taoch
"""

# 载入模块
import pandas as pd
pd.set_option('expand_frame_repr',False)

import numpy as np
import scipy.optimize as sco
import scipy.interpolate as sci

import matplotlib as plt


# 定义马科维茨类
class Markowitz(object):
    '''
    根据马科维兹的均值方差模型相关方法配置资产
    输入参数
    -------
    daily_ret: pd.DataFrame
        底层资产的日收益率
    '''
    # 定义函数中的不同变量
    def __init__(self, daily_ret):
        '''外部输入变量'''
        self.daily_ret = daily_ret                  # 资产日收益率

        '''内部计算变量'''
        self.noa = len(daily_ret.columns)           # 资产数量
        self.tradeday = daily_ret.index             # 资产交易日
        self.asset = daily_ret.columns              # 资产名称
        self.daily_ret_bl = pd.DataFrame()          # 加入BL权重的资产日收益率

        self.ann_ret = pd.DataFrame()               # 资产年化收益率
        self.ann_std = pd.DataFrame()               # 资产年化波动率（标准差）
        self.ann_cov = pd.DataFrame()               # 资产收益率相关系数
        
        # 组合数据统计
        self.optr_weight = pd.DataFrame()           # 最大收益率组合权重
        self.optr_perform = pd.DataFrame()          # 最大收益率组合表现
        self.optv_weight = pd.DataFrame()           # 最小波动率组合权重
        self.optv_perform = pd.DataFrame()          # 最小波动率组合表现
        
        # 资本市场线最有组合
        self.opt_weight = pd.DataFrame()            # 最优组合权重
        self.opt_perform = pd.DataFrame()           # 最优组合表现
                       
                                    
    # 年化相关数据
    def get_annualize_data(self):
        # 默认年化数据*252天（交易日）
        # 年化收益率
        _ann_ret = self.daily_ret.mean()*252
        # 年化波动率
        _ann_std = self.daily_ret.std()*np.sqrt(252)
        # 年化协方差矩阵
        _ann_cov = self.daily_ret.cov() * 252
        # 匹配内部变量
        self.ann_ret = _ann_ret
        self.ann_std = _ann_std
        self.ann_cov = _ann_cov
                
        
    # 定义均值方差投资组合（作图版）
    def mean_std_portfolio_plotting(self,
                           rolling_num = 10000,
                           rf = 0.01,
                           efficient_front = False,
                           cap_market_line = True):
        '''
        输入参数
        -------
        rolling_num: float 
            模拟组合数量，默认10000
        efficient_front: bool
            是否画出有效边界
        '''
        _prets = []
        _pvols = []
        for p in range(rolling_num):
            _weights = np.random.random(self.noa)
            _weights /= np.sum(_weights)
            _prets.append(np.sum(self.daily_ret.mean() * _weights) * 252)
            _pvols.append(np.sqrt(np.dot(_weights.T, np.dot(self.daily_ret.cov() * 252, _weights))))
        _prets = np.array(_prets)
        _pvols = np.array(_pvols)
        
        # 定义有效边界：给定风险水平下最大收益
        def min_func_port(_weights):
            return self.statistics(_weights)[1]
        
                    
        # 内置运行一遍get_annulized_data
        self.get_annualize_data()
        
        
        # 有效收益率区间（后期可以调整）
        _trets = np.linspace(min(self.ann_ret),max(self.ann_ret),100)
        _tvols = []
        for tret in _trets:
            # 定义约束条件
            _cons = ({'type':'eq', 'fun': lambda x: self.statistics(x)[0] - tret},
                      {'type':'eq', 'fun': lambda x: np.sum(x) - 1})
            # 约束为0到1之间
            _bnds = tuple((0,1) for x in range(self.noa))
            _res = sco.minimize(min_func_port, self.noa * [1./self.noa], method = 'SLSQP',
                                bounds = _bnds, constraints = _cons)
            _tvols.append(_res['fun'])
        _tvols = np.array(_tvols)

        # 不画出有效边界和资本市场线
        if efficient_front == False and cap_market_line == False:
            plt.figure.Figure(figsize = (15,10))
            plt.pyplot.scatter(_pvols, _prets, c = _prets/_pvols, marker = 'o', cmap = 'Accent')
            plt.pyplot.grid(True)
            plt.pyplot.xlabel('Expected Volatility')
            plt.pyplot.ylabel('Expected Return')
            plt.pyplot.colorbar(label = 'Sharpe Ratio')
        
        # 画出有效边界
        elif efficient_front:            

            # 内置运行一遍constrain_portfolio得到带有约束的组合数据
            self.constraint_portfolio()
            
            plt.figure.Figure(figsize=(15,10))    
            plt.pyplot.scatter(_pvols, _prets, c=_prets/_pvols, marker='o')    # random portfolio composition 
            plt.pyplot.scatter(_tvols, _trets, c=_trets/_tvols, marker='x')    # efficient frontier
            plt.pyplot.plot(self.statistics(self.optr_weight['weight'])[1], self.statistics(self.optr_weight['weight'])[0], 'r*', 
                                       markersize = 15.0)    # portfolio with highest sharpe ratio
            plt.pyplot.plot(self.statistics(self.optv_weight['weight'])[1], self.statistics(self.optv_weight['weight'])[0], 'y*', 
                                       markersize = 15.0)    # portfolio with minimum variance portfolio
            plt.pyplot.grid(True)
            plt.pyplot.xlabel('expected volatility')
            plt.pyplot.ylabel('expected return')
            plt.pyplot.colorbar(label='sharpe ratio')

        # 画出有效边界和最优组合
        elif cap_market_line:          

            # 资本市场线
            _ind = np.argmin(_tvols)
            _evols = _tvols[_ind:]
            _erets = _trets[_ind:]
            
            _tck = sci.splrep(_evols, _erets)
            
            def f(x):
                """有效边界方程(splines approximations)"""
                return sci.splev(x, _tck, der = 0)
            
            def df(x):
                """有效边界方程的一阶导数"""
                return sci.splev(x, _tck, der = 1)
            
            def equations(p):
                """穿过无风险资产的有效边界切线"""
                eq1 = rf - p[0]
                eq2 = rf + p[1] * p[2] - f(p[2])
                eq3 = p[1] - df(p[2])
                return eq1, eq2, eq3
            
            # 这里的参数需要自行选择
            grad = (max(self.ann_ret) - min(self.ann_ret))/(max(self.ann_std) - min(self.ann_std))
            opt = sco.fsolve(equations,[rf, grad, self.ann_ret.mean()])

            plt.figure.Figure(figsize=(15,10))
            plt.pyplot.scatter(_pvols, _prets, c=(_prets - rf)/_pvols, marker='o')    # random portfolio composition
            plt.pyplot.plot(_evols, _erets, 'g', lw = 4.0)    # efficient frontier
            #cx = np.linspace(0.0, 0.3)
            #plt.pyplot.plot(cx, opt[0] + opt[1] * cx, lw = 1.5)    # capital market line
            plt.pyplot.plot(opt[2],f(opt[2]), 'r*', markersize = 15.0)
            plt.pyplot.grid(True)
            plt.pyplot.axhline(0, color = 'k', ls = '-', lw = 2.0)
            plt.pyplot.axvline(0, color = 'k', ls = '-', lw = 2.0)
            plt.pyplot.xlabel('expected volatility')
            plt.pyplot.ylabel('expected return')
            plt.pyplot.colorbar(label = 'sharpe ratio')
            

    # 计算markowitz最优组合
    def mean_std_portfolio(self,
                           rolling_num = 10000,
                           rf = 0.01):
        '''
        输入参数
        -------
        rolling_num: float 
            模拟组合数量，默认10000
        efficient_front: bool
            是否画出有效边界
        '''
        _prets = []
        _pvols = []
        for p in range(rolling_num):
            _weights = np.random.random(self.noa)
            _weights /= np.sum(_weights)
            _prets.append(np.sum(self.daily_ret.mean() * _weights) * 252)
            _pvols.append(np.sqrt(np.dot(_weights.T, np.dot(self.daily_ret.cov() * 252, _weights))))
        _prets = np.array(_prets)
        _pvols = np.array(_pvols)
        
        # 定义有效边界：给定风险水平下最大收益
        def min_func_port(_weights):
            return self.statistics(_weights)[1]
                            
        # 内置运行一遍get_annulized_data
        self.get_annualize_data()
                
        # 有效收益率区间（后期可以调整）
        _trets = np.linspace(min(self.ann_ret),max(self.ann_ret),100)
        _tvols = []
        for tret in _trets:

            # 定义约束条件
            _cons = ({'type':'eq', 'fun': lambda x: self.statistics(x)[0] - tret},
                      {'type':'eq', 'fun': lambda x: np.sum(x) - 1})
            # 约束为0到1之间
            _bnds = tuple((0,1) for x in range(self.noa))
            _res = sco.minimize(min_func_port, self.noa * [1./self.noa], method = 'SLSQP',
                                bounds = _bnds, constraints = _cons)
            _tvols.append(_res['fun'])
        _tvols = np.array(_tvols)
                    
        # 资本市场线
        _ind = np.argmin(_tvols)
        _evols = _tvols[_ind:]
        _erets = _trets[_ind:]
        
        _tck = sci.splrep(_evols, _erets)
        
        def f(x):
            """有效边界方程(splines approximations)"""
            return sci.splev(x, _tck, der = 0)
        
        def df(x):
            """有效边界方程的一阶导数"""
            return sci.splev(x, _tck, der = 1)
        
        def equations(p):
            """穿过无风险资产的有效边界切线"""
            eq1 = rf - p[0]
            eq2 = rf + p[1] * p[2] - f(p[2])
            eq3 = p[1] - df(p[2])
            return eq1, eq2, eq3
        
        # 这里的参数需要自行选择
        grad = (max(self.ann_ret) - min(self.ann_ret))/(max(self.ann_std) - min(self.ann_std))
        opt = sco.fsolve(equations,[rf, grad, self.ann_ret.mean()])

        # 计算最优组合
        _cons_opt = ({'type': 'eq', 'fun': lambda x: self.statistics(x)[0] - f(opt[2])},
                      {'type': 'eq','fun': lambda x: np.sum(x) - 1})
        _res = sco.minimize(min_func_port, self.noa * [1./self.noa], method = 'SLSQP',
                           bounds = _bnds, constraints = _cons_opt)
        
        # 最优组合权重
        _d = dict(zip(self.asset, _res['x'].round(2)))
        _opt_port_weight = pd.DataFrame(list(_d.items()), columns = ['asset','weight'])
        _opt_port_weight.set_index('asset',drop=True,inplace=True)
        
        # 最优组合表现
        _d1 = dict(zip(['return','volatility','sharpe'],self.statistics(_res['x']).round(4)))
        _opt_perform = pd.DataFrame(list(_d1.items()), columns = ['performs','data'])
        _opt_perform.set_index('performs',drop=True,inplace=True)
        
        # 内部变量匹配
        self.opt_weight = _opt_port_weight
        self.opt_perform = _opt_perform
            
            
    # 结果统计（年化收益，年化波动，夏普比率）    
    def statistics(self,weights):
        
        # 代入相关权重
        _weights = np.array(weights)
        
        # 根据权重计算各类指标
        _prets = np.sum(self.daily_ret.mean() * _weights) * 252
        _pvols = np.sqrt(np.dot(_weights.T, np.dot(self.daily_ret.cov() * 252, _weights)))
        
        return np.array([_prets, _pvols, _prets/_pvols])
        
    # 带约束的投资组合
    def constraint_portfolio(self):
        '''
        输入参数
        -------
        target: int
            {1: 收益率; -1: 波动率}
        '''
        
        # 定义基本约束
        # 平衡权重配置
        _cons = ({'type':'eq', 'fun': lambda x: np.sum(x) - 1})
        
        # 约束为0到1之间
        _bnds = tuple((0,1) for x in range(self.noa))

        # 定义收益最大化
        def max_func_ret(_weights):
            return (-1)*(self.statistics(_weights)[0])
        
        # 根据收益最大化优化组合    
        # 输入权重为等权: noa*[1./noa]
        _optr = sco.minimize(max_func_ret, self.noa*[1./self.noa], method = 'SLSQP',
                            bounds = _bnds, constraints = _cons)
        
        # 收益最大化组合权重
        d = dict(zip(self.asset, _optr['x'].round(2)))
        _optr_port_weight = pd.DataFrame(list(d.items()), columns = ['asset','weight'])
        
        # 收益最大化组合表现
        d1 = dict(zip(['return','volatility','sharpe'],self.statistics(_optr['x']).round(4)))
        _optr_perform = pd.DataFrame(list(d1.items()),columns = ['performs','data'])

        # 匹配内部变量
        self.optr_weight = _optr_port_weight
        self.optr_perform = _optr_perform
    
        # 定义波动率最小化
        def min_func_variance(_weights):
            # 输出组合方差（标准差平方）
            return self.statistics(_weights)[1]**2
        
        # 根据波动率最小化优化组合
        _optv = sco.minimize(min_func_variance, self.noa*[1./self.noa], method = 'SLSQP',
                             bounds = _bnds, constraints = _cons)
        
        # 波动率最小化组合权重
        d = dict(zip(self.asset,_optv['x'].round(2)))
        _optv_port_weight = pd.DataFrame(list(d.items()), columns = ['asset','weight'])
        _optv_port_weight.set_index('asset',drop=True,inplace=True)
        # 波动率最小化组合表现
        d1 = dict(zip(['return','volatility','sharpe'],self.statistics(_optv['x'].round(4))))
        _optv_perform = pd.DataFrame(list(d1.items()),columns = ['performs','data'])
        _optv_perform.set_index('performs',drop=True,inplace=True)
        # 匹配内部变量
        self.optv_weight = _optv_port_weight
        self.optv_perform = _optv_perform

